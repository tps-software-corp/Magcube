<?php

namespace Plugin\TPS\Repository;

use Eccube\Repository\AbstractRepository;
use Plugin\TPS\Entity\Config;
use Symfony\Bridge\Doctrine\RegistryInterface;

/**
 * ConfigRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class NhqcRepository
{
    private $client;
    private $session;
    /**
     * ConfigRepository constructor.
     *
     * @param RegistryInterface $registry
     */
    public function __construct(RegistryInterface $registry)
    {
        $this->client = new \SoapClient('https://nguonhangquangchau.com/api/v2_soap/?wsdl');
        // If somestuff requires api authentication,
        // then get a session token
        if (!empty($_SESSION['soap_session'])) {
            $this->session = $_SESSION['soap_session'];
        } else {
            $this->session = $this->client->login('demo', '{Q^Yu8pQm3<Uo(B{');
            $_SESSION['soap_session'] = $this->session;
        }

        if (!empty($_SESSION['soapcookies'])) {
            foreach($_SESSION['soapcookies'] AS $name=>$value) {
                if (is_array($value)) {
                    foreach($value AS $k=>$v) {
                        $this->client->__setCookie($name[$k], $v);
                    }
                } else {
                    $this->client->__setCookie($name, $value);
                }
            }
        }
    }

    public function getInfo($product_id) 
    {
        $result = $this->client->catalogProductInfo($this->session, $product_id);
        $result->images = $this->client->catalogProductAttributeMediaList($this->session, $product_id);
        $_SESSION['soapcookies'] = $this->client->_cookies;
        return $this->_format($result);
    }

    public function search($sku)
    {
        // if ($action == 'search') {
            $filter = array(
                'complex_filter' => array(
                    array('key' => 'type', 'value' => array('key' => 'eq', 'value' => 'configurable')),
                    array('key' => 'sku', 'value' => array('key' => 'like', 'value' => '%'.$sku.'%'))
                )
            );
            $result = $this->client->catalogProductList($this->session, $filter);
            array_slice($result, 8); 
            foreach($result as $index => $p) {
                $result[$index]->images = $this->client->catalogProductAttributeMediaList($this->session, $p->product_id);
                $result[$index]->info = $this->client->catalogProductInfo($this->session, $p->product_id);
            }
        // }

        // if ($action == 'news') {
            // $from = new \DateTime();
            // if (isset($_GET['d'])) {
            //     $from->modify('- ' . $_GET['d'] . ' days');
            // }

            // $filter = array(
            //     'complex_filter' => array(
            //         array('key' => 'type', 'value' => array('key' => 'eq', 'value' => 'configurable')),
            //         array('key' => 'arrival_date', 'value' => array('key' => 'from', 'value' => $from->format('Y-m-d'))),
            //         array('key' => 'arrival_date', 'value' => array('key' => 'to', 'value' => $from->format('Y-m-d')))
            //     )
            // );
            // $result = $this->client->catalogProductList($this->session, $filter);
        // }
        // if ($action == 'detail') {
        //     $result = $client->catalogProductInfo($session, $_GET['id']);
        //     $result->images = $client->catalogProductAttributeMediaList($session, $_GET['id']);
        // }
        // if ($action == 'qty') {
        //     $filter = array(
        //         'complex_filter' => array(
        //             array('key' => 'type', 'value' => array('key' => 'eq', 'value' => 'simple')),
        //             array('key' => 'sku', 'value' => array('key' => 'like', 'value' => '%'.$_GET['id'].'%'))
        //         )
        //     );
        //     $resulT = $client->catalogProductList($session, $filter);
        //     $ids = [];
        //     foreach ($resulT as $p) {
        //         $ids[] = $p->product_id;
        //     }
        //     $qty = [];
        //     $qty1 = $client->catalogInventoryStockItemList($session, $ids);
        //     foreach($qty1 as $q) {
        //         $qty[$q->product_id] = $q;
        //     }
        //     $result['items'] = $resulT;
        //     $result['qty'] = $qty;
        // }
        // If you don't need the session anymore
        // $this->client->endSession($this->session);
        $_SESSION['soapcookies'] = $this->client->_cookies;
        return $this->_format($result);
    }

    protected function _format($result)
    {
        if (!is_array($result)) {
            $result = [$result];
        }
        foreach($result as $index => $p) {
            $price = substr($p->sku, strlen($p->sku) - 3, strlen($p->sku));
            $result[$index]->price = (int) ($price . '000');
        }
        if (count($result) == 1 ) {
            return $result[0];
        }
        return $result;
    }
}
